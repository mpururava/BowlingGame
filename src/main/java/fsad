import pojo.Score;

import java.util.ArrayList;
import java.util.List;

public class Game {
    public int frameCounter=0;
    public static int TotalNoOfFrames=10;
    public int NoOfAttemptsLeft=2;
    ArrayList<Score> AllFrameRecord;
    public Game(){
        AllFrameRecord = new ArrayList<Score>(TotalNoOfFrames);

        for (int i = 0; i < TotalNoOfFrames; i++) {
            AllFrameRecord.add(new Score() );
        }
    }

    public void throwBall(int pinned) {

        Score frameScore= getScoreOfCurrentFrame();
        System.out.println("FrameNo."+frameCounter+"the Throw "+pinned);

        frameScore.setRoll(pinned);
        NoOfAttemptsLeft--;

        if(frameCounter==(TotalNoOfFrames-1)&&(frameScore.isSpare()||frameScore.isStrike())){
            System.out.println("DO something---------------last extra Round");
        }
        if(frameScore.getAttempt()==2||frameScore.isStrike())
        {
            scoreCalculator();
            frameCounter++;

        }

    }





    public void scoreCalculator()
    {
        Score frameScore = getScoreOfCurrentFrame();
        //Score SecondPreviousFrame = AllFrameRecord.get(frameCounter - 2);
        if(isThisFirstFrame())
            frameScore.setSumScore(frameScore.getFrameScore());
        else {
            Score previousFrame = getScoreOfPreviousFrame();
            if (previousFrame.isStrike()) {

                int strikeBonus = frameScore.getFrameScore() + previousFrame.getSumScore();

                previousFrame.setSumScore(strikeBonus);
                //if(isConsecutiveStrikes()){
                  //  Score SecondPreviousFrame = AllFrameRecord.get(frameCounter - 2);
                    //if(frameScore.isStrike())
                      //  SecondPreviousFrame.setSumScore(SecondPreviousFrame.getSumScore()+30);
                //}


            } else if (previousFrame.isSpare()) {

                int strikeBonus = frameScore.getRoll().get(0) +previousFrame.getSumScore();
                previousFrame.setSumScore(strikeBonus);


            }
            frameScore.setSumScore(frameScore.getFrameScore() + previousFrame.getSumScore());
            //if(isConsecutiveStrikes()){

              //  SecondPreviousFrame.setSumScore(SecondPreviousFrame.getSumScore());
            //}

            isConsecutiveStrikes();



        }

        for(Score sc:AllFrameRecord)
            System.out.println(sc);
    }

    private boolean isConsecutiveStrikes() {

        if(frameCounter>=2) {
            Score frameScore = getScoreOfCurrentFrame();
            Score PreviousFrame = AllFrameRecord.get(frameCounter - 1);
            Score SecondPreviousFrame = AllFrameRecord.get(frameCounter - 2);
            if (PreviousFrame.isStrike() && SecondPreviousFrame.isStrike()) {
                return true;
                //SecondPreviousFrame.setSumScore(SecondPreviousFrame.getSumScore() + frameScore.getRoll().get(0));
            }
        }return false;
    }

    public Score getFrameByID(int a)
    {
        Score scoreFrame= AllFrameRecord.get(frameCounter-a);
        return scoreFrame;
    }
    public Score getScoreOfCurrentFrame()
    {
        Score scoreFrame= AllFrameRecord.get(frameCounter);
        return scoreFrame;
    }
    public Score getScoreOfPreviousFrame()
    {
        Score scoreFrame= AllFrameRecord.get(frameCounter-1);
        return scoreFrame;
    }
    public Score getScoreFrameByID(int i)
    {
        Score scoreFrame= AllFrameRecord.get(i);
        return scoreFrame;
    }
    public boolean isThisFirstFrame()
    {
        return frameCounter==0;
    }
}




public void scoreCalculator()
    {
/*        System.out.println("---------------------------------------------------------------");
        Iterator<Score> iterate= AllFrameRecord.iterator();
        while (iterate.hasNext()){
            int sum=0;
            Score current=iterate.next();
            if(current.isStrike()){
                Score next = iterate.next();
                if(next.isStrike())
            }

        }
    s
*/
        Score frameScore = getScoreOfCurrentFrame();
        //Score SecondPreviousFrame = AllFrameRecord.get(frameCounter - 2);
        if(isThisFirstFrame())
            frameScore.setSumScore(frameScore.getFrameScore());
        else {
            Score previousFrame = getScoreOfPreviousFrame();
            if (previousFrame.isStrike()) {

                int strikeBonus = frameScore.getFrameScore() + previousFrame.getSumScore();

                previousFrame.setSumScore(strikeBonus);
                //if(isConsecutiveStrikes()){
                  //  Score SecondPreviousFrame = AllFrameRecord.get(frameCounter - 2);
                    //if(frameScore.isStrike())
                      //  SecondPreviousFrame.setSumScore(SecondPreviousFrame.getSumScore()+30);
                //}


            } else if (previousFrame.isSpare()) {
                int strikeBonus = frameScore.getRoll().get(0) +previousFrame.getSumScore();
                previousFrame.setSumScore(strikeBonus);
            }
            frameScore.setSumScore(frameScore.getFrameScore() + previousFrame.getSumScore());
            //if(isConsecutiveStrikes()){

              //  SecondPreviousFrame.setSumScore(SecondPreviousFrame.getSumScore());
            //}

           // isConsecutiveStrikes();



        }

        for(Score sc:AllFrameRecord)
            System.out.println(sc);
    }




    private boolean isConsecutiveStrikes() {

        if(frameCounter>=2) {
            Score frameScore = getScoreOfCurrentFrame();
            Score PreviousFrame = AllFrameRecord.get(frameCounter - 1);
            Score SecondPreviousFrame = AllFrameRecord.get(frameCounter - 2);
            if (PreviousFrame.isStrike() && SecondPreviousFrame.isStrike()) {
                return true;
                //SecondPreviousFrame.setSumScore(SecondPreviousFrame.getSumScore() + frameScore.getRoll().get(0));
            }
        }return false;
    }